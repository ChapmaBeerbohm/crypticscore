/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RatingManager {
  export type RatingProjectStruct = {
    projectId: BigNumberish;
    creator: AddressLike;
    name: string;
    description: string;
    dimensions: string[];
    scaleMax: BigNumberish;
    endTime: BigNumberish;
    allowMultiple: boolean;
    ended: boolean;
    ratingCount: BigNumberish;
  };

  export type RatingProjectStructOutput = [
    projectId: bigint,
    creator: string,
    name: string,
    description: string,
    dimensions: string[],
    scaleMax: bigint,
    endTime: bigint,
    allowMultiple: boolean,
    ended: boolean,
    ratingCount: bigint
  ] & {
    projectId: bigint;
    creator: string;
    name: string;
    description: string;
    dimensions: string[];
    scaleMax: bigint;
    endTime: bigint;
    allowMultiple: boolean;
    ended: boolean;
    ratingCount: bigint;
  };

  export type EncryptedRatingStruct = {
    rater: AddressLike;
    timestamp: BigNumberish;
  };

  export type EncryptedRatingStructOutput = [
    rater: string,
    timestamp: bigint
  ] & { rater: string; timestamp: bigint };
}

export interface RatingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowCreatorDecryptAll"
      | "allowCreatorDecryptDimension"
      | "allowUserDecryptOwnRating"
      | "createRatingProject"
      | "endProject"
      | "getProject"
      | "getProjectRatingCount"
      | "getRating"
      | "getRatingScore"
      | "hasRated"
      | "projectCount"
      | "projects"
      | "protocolId"
      | "submitRating"
      | "userHasRated"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProjectEnded"
      | "RatingProjectCreated"
      | "RatingSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowCreatorDecryptAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowCreatorDecryptDimension",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowUserDecryptOwnRating",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRatingProject",
    values: [string, string, string[], BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "endProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectRatingCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRating",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatingScore",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRated",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitRating",
    values: [BigNumberish, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasRated",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowCreatorDecryptAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowCreatorDecryptDimension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowUserDecryptOwnRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRatingProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProjectRatingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRating", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRatingScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasRated",
    data: BytesLike
  ): Result;
}

export namespace ProjectEndedEvent {
  export type InputTuple = [projectId: BigNumberish];
  export type OutputTuple = [projectId: bigint];
  export interface OutputObject {
    projectId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatingProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    creator: AddressLike,
    name: string,
    dimensionCount: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    creator: string,
    name: string,
    dimensionCount: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    creator: string;
    name: string;
    dimensionCount: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatingSubmittedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    rater: AddressLike,
    timestamp: BigNumberish,
    ratingIndex: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    rater: string,
    timestamp: bigint,
    ratingIndex: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    rater: string;
    timestamp: bigint;
    ratingIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RatingManager extends BaseContract {
  connect(runner?: ContractRunner | null): RatingManager;
  waitForDeployment(): Promise<this>;

  interface: RatingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowCreatorDecryptAll: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowCreatorDecryptDimension: TypedContractMethod<
    [projectId: BigNumberish, dimensionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowUserDecryptOwnRating: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createRatingProject: TypedContractMethod<
    [
      name: string,
      description: string,
      dimensions: string[],
      scaleMax: BigNumberish,
      endTime: BigNumberish,
      allowMultiple: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  endProject: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProject: TypedContractMethod<
    [projectId: BigNumberish],
    [RatingManager.RatingProjectStructOutput],
    "view"
  >;

  getProjectRatingCount: TypedContractMethod<
    [projectId: BigNumberish],
    [bigint],
    "view"
  >;

  getRating: TypedContractMethod<
    [projectId: BigNumberish, ratingIndex: BigNumberish],
    [RatingManager.EncryptedRatingStructOutput],
    "view"
  >;

  getRatingScore: TypedContractMethod<
    [
      projectId: BigNumberish,
      ratingIndex: BigNumberish,
      dimensionIndex: BigNumberish
    ],
    [string],
    "view"
  >;

  hasRated: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  projectCount: TypedContractMethod<[], [bigint], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        projectId: bigint;
        creator: string;
        name: string;
        description: string;
        scaleMax: bigint;
        endTime: bigint;
        allowMultiple: boolean;
        ended: boolean;
        ratingCount: bigint;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  submitRating: TypedContractMethod<
    [
      projectId: BigNumberish,
      encryptedScores: BytesLike[],
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  userHasRated: TypedContractMethod<
    [projectId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowCreatorDecryptAll"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowCreatorDecryptDimension"
  ): TypedContractMethod<
    [projectId: BigNumberish, dimensionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowUserDecryptOwnRating"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRatingProject"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      dimensions: string[],
      scaleMax: BigNumberish,
      endTime: BigNumberish,
      allowMultiple: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endProject"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProject"
  ): TypedContractMethod<
    [projectId: BigNumberish],
    [RatingManager.RatingProjectStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectRatingCount"
  ): TypedContractMethod<[projectId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRating"
  ): TypedContractMethod<
    [projectId: BigNumberish, ratingIndex: BigNumberish],
    [RatingManager.EncryptedRatingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRatingScore"
  ): TypedContractMethod<
    [
      projectId: BigNumberish,
      ratingIndex: BigNumberish,
      dimensionIndex: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRated"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "projectCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        projectId: bigint;
        creator: string;
        name: string;
        description: string;
        scaleMax: bigint;
        endTime: bigint;
        allowMultiple: boolean;
        ended: boolean;
        ratingCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitRating"
  ): TypedContractMethod<
    [
      projectId: BigNumberish,
      encryptedScores: BytesLike[],
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userHasRated"
  ): TypedContractMethod<
    [projectId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ProjectEnded"
  ): TypedContractEvent<
    ProjectEndedEvent.InputTuple,
    ProjectEndedEvent.OutputTuple,
    ProjectEndedEvent.OutputObject
  >;
  getEvent(
    key: "RatingProjectCreated"
  ): TypedContractEvent<
    RatingProjectCreatedEvent.InputTuple,
    RatingProjectCreatedEvent.OutputTuple,
    RatingProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RatingSubmitted"
  ): TypedContractEvent<
    RatingSubmittedEvent.InputTuple,
    RatingSubmittedEvent.OutputTuple,
    RatingSubmittedEvent.OutputObject
  >;

  filters: {
    "ProjectEnded(uint256)": TypedContractEvent<
      ProjectEndedEvent.InputTuple,
      ProjectEndedEvent.OutputTuple,
      ProjectEndedEvent.OutputObject
    >;
    ProjectEnded: TypedContractEvent<
      ProjectEndedEvent.InputTuple,
      ProjectEndedEvent.OutputTuple,
      ProjectEndedEvent.OutputObject
    >;

    "RatingProjectCreated(uint256,address,string,uint8,uint256)": TypedContractEvent<
      RatingProjectCreatedEvent.InputTuple,
      RatingProjectCreatedEvent.OutputTuple,
      RatingProjectCreatedEvent.OutputObject
    >;
    RatingProjectCreated: TypedContractEvent<
      RatingProjectCreatedEvent.InputTuple,
      RatingProjectCreatedEvent.OutputTuple,
      RatingProjectCreatedEvent.OutputObject
    >;

    "RatingSubmitted(uint256,address,uint256,uint256)": TypedContractEvent<
      RatingSubmittedEvent.InputTuple,
      RatingSubmittedEvent.OutputTuple,
      RatingSubmittedEvent.OutputObject
    >;
    RatingSubmitted: TypedContractEvent<
      RatingSubmittedEvent.InputTuple,
      RatingSubmittedEvent.OutputTuple,
      RatingSubmittedEvent.OutputObject
    >;
  };
}
